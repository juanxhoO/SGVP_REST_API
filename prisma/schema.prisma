// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  email           String      @unique
  name            String?
  lastname        String?
  phone           String?
  password        String
  id_card         String?
  birthdate       DateTime?
  city            String?
  bloodType       String?
  birthplace      String?
  subcircuitId    String?     @unique
  subcircuit      SubCircuit? @relation(fields: [subcircuitId], references: [id])
  rank            OfficeRank?
  vehicle         Vehicle[]
  role            Role        @default(USER)
  isEmailVerified Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Token           Token[]
  orders          Order[]
  reports         Report[]
}

model Vehicle {
  id              String   @id @default(uuid())
  name            String
  images          String?
  chasis          String
  model           String
  brand           String
  plate           String
  engine_cc       Int?
  type            String
  engine          String?
  carringcapacity Int?
  passengers      Int?
  mileage         Int
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orders          Order[]
  report          Report?
}

model Report {
  id        String   @id @default(uuid())
  name      String
  files     String
  images    String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicleId String?  @unique
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
}

model Workshop {
  id        String    @id @default(uuid())
  name      String
  email     String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contract  Contract?
  phone     String
}

model Contract {
  id         String   @id @default(uuid())
  name       String
  details    String
  workshopId String   @unique
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Circuit {
  id          String       @id @default(uuid())
  name        String
  image       String
  code        String       @unique
  cityId      String
  city        City?        @relation(fields: [cityId], references: [id])
  subcircuits SubCircuit[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model SubCircuit {
  id        String   @id @default(uuid())
  name      String
  image     String
  code      String   @unique
  circuitId String
  circuit   Circuit  @relation(fields: [circuitId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  circuits  Circuit[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Spare {
  id        String   @id @default(uuid())
  name      String
  image     String?
  sku       String
  stock     Int
  price     Float
  condition String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     String
  model     String
}

model Notification {
  id        String   @id @default(uuid())
  name      String
  type      String
  content   String
  createdAt DateTime @updatedAt
}

model Maintenance {
  id        String   @id @default(uuid())
  name      String
  price     Float
  details   String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String      @id @default(uuid())
  vehicleId      String
  vehicle        Vehicle     @relation(fields: [vehicleId], references: [id])
  mecanicId      Int?
  selectedTime   String
  maintenanceDay DateTime
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  status         OrderStatus
  observations   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  maintenance    Maintenance @relation(fields: [maintenanceId], references: [id])
  maintenanceId  String // relation scalar field (used in the `@relation` attribute above)
}

model File {
  id            String   @id @default(uuid())
  createdAt     DateTime
  name          String
  reference_url String
  type          String
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
}

enum Role {
  USER
  ADMIN
}

enum OfficeRank {
  TENIENTE_CORONEL
  SARGENTO_PRIMERO
  SARGENTO_SEGUNDO
  CABO_PRIMERO
  CABO_SEGUNDO
  TENIENTE
  MAYOR
  CAPITAN
  POLICIA
  SUBTENIENTE
}

enum VehicleType {
  MOTORBIKE
  SEDAN
  SUV
}

enum OrderStatus {
  ACCEPTED
  CANCELLED
  PENDANT
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

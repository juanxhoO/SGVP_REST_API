// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String    @unique
  name            String?
  lastname        String?
  phone           String?
  password        String
  id_card         String?
  birthdate       DateTime?
  birthplace      String?
  bloodType       String?
  vehicle         Vehicle[]
  role            Role      @default(USER)
  isEmailVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Token           Token[]
}

model Vehicle {
  id              String   @id @default(uuid())
  name            String
  images          String?
  chasis          String
  model           String
  brand           String
  plate           String
  engine_cc       Int?
  engine          String?
  carringcapacity Int?
  passengers      Int?
  mileage         Int
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


model Report {
  id        String   @id @default(uuid())
  name      String
  files     String
  images    String
  content   String
  userId    Int
  date      DateTime
  createdAt DateTime
  updatedAt DateTime @updatedAt
}

model Workshop {
  id        String   @id @default(uuid())
  name      String
  email     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone String
}

model Contract {
  id        String   @id @default(uuid())
  name      String
  mecanicId String
  type      String
  createdAt DateTime
  updatedAt DateTime @updatedAt
}

model Circuit {
  id        String   @id @default(uuid())
  name      String
  image     String
  code      String
  createdAt DateTime
  updatedAt DateTime @updatedAt
}

model Distrit {
  id    String @id @default(uuid())
  name  String
  code  String
  image String
}

model City {
  id   String @id @default(uuid())
  name String
}

model Spare {
  id        String   @id @default(uuid())
  name      String
  image     String?
  sku       String
  stock     Int
  price     Float
  condition String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand String
  model String
}

model Notification {
  id   String @id @default(uuid())
  name String
  type String
  createdAt DateTime @updatedAt
}

model Maintenance {
  id        String   @id @default(uuid())
  name      String
  price     Float
  details   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime
  mecanicId Int
  userId    Int
  name      String
  updatedAt DateTime @updatedAt
}

model File {
  id            String   @id @default(uuid())
  createdAt     DateTime
  name          String
  reference_url String
  type          String
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
}

enum Role {
  USER
  MECHANIC
  TECHNIC
  ADMIN
  MANAGEMENT
}

enum OfficeRank {
  TENIENTE_CORONEL
  SARGENTO_PRIMERO
  SARGENTO_SEGUNDO
  CABO_PRIMERO
  CABO_SEGUNDO
  TENIENTE
  MAYOR
  CAPITAN
  POLICIA
  SUBTENIENTE
}

enum VehicleType {
  MOTORBIKE
  SEDAN
  SUV
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
